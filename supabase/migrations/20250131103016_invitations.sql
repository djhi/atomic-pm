create table "public"."invitations" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "board_id" bigint not null,
    "board_name" text not null,
    "invited_by" text not null,
    "email" text not null
);


alter table "public"."invitations" enable row level security;

CREATE UNIQUE INDEX invitation_constraint ON public.invitations USING btree (email, board_id);

CREATE UNIQUE INDEX invitations_pkey ON public.invitations USING btree (id);

alter table "public"."invitations" add constraint "invitations_pkey" PRIMARY KEY using index "invitations_pkey";

alter table "public"."invitations" add constraint "invitations_board_id_fkey" FOREIGN KEY (board_id) REFERENCES boards(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."invitations" validate constraint "invitations_board_id_fkey";

grant delete on table "public"."invitations" to "anon";

grant insert on table "public"."invitations" to "anon";

grant references on table "public"."invitations" to "anon";

grant select on table "public"."invitations" to "anon";

grant trigger on table "public"."invitations" to "anon";

grant truncate on table "public"."invitations" to "anon";

grant update on table "public"."invitations" to "anon";

grant delete on table "public"."invitations" to "authenticated";

grant insert on table "public"."invitations" to "authenticated";

grant references on table "public"."invitations" to "authenticated";

grant select on table "public"."invitations" to "authenticated";

grant trigger on table "public"."invitations" to "authenticated";

grant truncate on table "public"."invitations" to "authenticated";

grant update on table "public"."invitations" to "authenticated";

grant delete on table "public"."invitations" to "service_role";

grant insert on table "public"."invitations" to "service_role";

grant references on table "public"."invitations" to "service_role";

grant select on table "public"."invitations" to "service_role";

grant trigger on table "public"."invitations" to "service_role";

grant truncate on table "public"."invitations" to "service_role";

grant update on table "public"."invitations" to "service_role";

create policy "Enable delete for board owners"
on "public"."invitations"
as permissive
for delete
to public
using (private.is_board_owner(( SELECT auth.uid() AS uid), board_id));


create policy "Enable insert for board owners"
on "public"."invitations"
as permissive
for insert
to public
with check (private.is_board_owner(( SELECT auth.uid() AS uid), board_id));


create policy "Enable select for invited users and board owners"
on "public"."invitations"
as permissive
for select
to public
using ((((( SELECT auth.jwt() AS jwt) ->> 'email'::text) = email) OR private.is_board_owner(( SELECT auth.uid() AS uid), board_id)));


drop policy "Enable delete user boards" on "public"."boards";

drop policy "Enable insert user boards" on "public"."boards";

drop policy "Enable select user boards" on "public"."boards";

drop policy "Enable update user boards" on "public"."boards";

create policy "Enable delete for board owners"
on "public"."boards"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for board owners"
on "public"."boards"
as permissive
for insert
to authenticated
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable select for board members"
on "public"."boards"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id) OR (id IN ( SELECT private.get_user_boards(( SELECT auth.uid() AS uid)) AS get_user_boards)));


create policy "Enable update for board owners"
on "public"."boards"
as permissive
for update
to public
using ((( SELECT auth.uid() AS uid) = user_id))
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable update for board owners"
on "public"."invitations"
as permissive
for update
to public
using (private.is_board_owner(( SELECT auth.uid() AS uid), board_id))
with check (private.is_board_owner(( SELECT auth.uid() AS uid), board_id));


drop policy "Enable users to view their own profiles" on "public"."profiles";

create policy "Enable users to view their own profiles and same board members profiles"
on "public"."profiles"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = id) OR (EXISTS ((SELECT private.get_user_boards(profiles.id)) INTERSECT (SELECT private.get_user_boards((select auth.uid()))))));