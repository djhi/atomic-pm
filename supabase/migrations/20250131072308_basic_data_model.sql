create table "public"."boards" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid not null,
    "name" text not null,
    "description" text
);


create table "public"."cards" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "column_id" bigint not null,
    "position" smallint not null,
    "title" text not null,
    "description" text
);


create table "public"."columns" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "board_id" bigint not null,
    "name" text not null,
    "position" smallint not null
);


CREATE UNIQUE INDEX boards_pkey ON public.boards USING btree (id);

CREATE UNIQUE INDEX cards_pkey ON public.cards USING btree (id);

CREATE UNIQUE INDEX columns_pkey ON public.columns USING btree (id);

alter table "public"."boards" add constraint "boards_pkey" PRIMARY KEY using index "boards_pkey";

alter table "public"."cards" add constraint "cards_pkey" PRIMARY KEY using index "cards_pkey";

alter table "public"."columns" add constraint "columns_pkey" PRIMARY KEY using index "columns_pkey";

alter table "public"."boards" add constraint "boards_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."boards" validate constraint "boards_user_id_fkey";

alter table "public"."cards" add constraint "cards_column_id_fkey" FOREIGN KEY (column_id) REFERENCES columns(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."cards" validate constraint "cards_column_id_fkey";

alter table "public"."columns" add constraint "columns_board_id_fkey" FOREIGN KEY (board_id) REFERENCES boards(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."columns" validate constraint "columns_board_id_fkey";

grant delete on table "public"."boards" to "anon";

grant insert on table "public"."boards" to "anon";

grant references on table "public"."boards" to "anon";

grant select on table "public"."boards" to "anon";

grant trigger on table "public"."boards" to "anon";

grant truncate on table "public"."boards" to "anon";

grant update on table "public"."boards" to "anon";

grant delete on table "public"."boards" to "authenticated";

grant insert on table "public"."boards" to "authenticated";

grant references on table "public"."boards" to "authenticated";

grant select on table "public"."boards" to "authenticated";

grant trigger on table "public"."boards" to "authenticated";

grant truncate on table "public"."boards" to "authenticated";

grant update on table "public"."boards" to "authenticated";

grant delete on table "public"."boards" to "service_role";

grant insert on table "public"."boards" to "service_role";

grant references on table "public"."boards" to "service_role";

grant select on table "public"."boards" to "service_role";

grant trigger on table "public"."boards" to "service_role";

grant truncate on table "public"."boards" to "service_role";

grant update on table "public"."boards" to "service_role";

grant delete on table "public"."cards" to "anon";

grant insert on table "public"."cards" to "anon";

grant references on table "public"."cards" to "anon";

grant select on table "public"."cards" to "anon";

grant trigger on table "public"."cards" to "anon";

grant truncate on table "public"."cards" to "anon";

grant update on table "public"."cards" to "anon";

grant delete on table "public"."cards" to "authenticated";

grant insert on table "public"."cards" to "authenticated";

grant references on table "public"."cards" to "authenticated";

grant select on table "public"."cards" to "authenticated";

grant trigger on table "public"."cards" to "authenticated";

grant truncate on table "public"."cards" to "authenticated";

grant update on table "public"."cards" to "authenticated";

grant delete on table "public"."cards" to "service_role";

grant insert on table "public"."cards" to "service_role";

grant references on table "public"."cards" to "service_role";

grant select on table "public"."cards" to "service_role";

grant trigger on table "public"."cards" to "service_role";

grant truncate on table "public"."cards" to "service_role";

grant update on table "public"."cards" to "service_role";

grant delete on table "public"."columns" to "anon";

grant insert on table "public"."columns" to "anon";

grant references on table "public"."columns" to "anon";

grant select on table "public"."columns" to "anon";

grant trigger on table "public"."columns" to "anon";

grant truncate on table "public"."columns" to "anon";

grant update on table "public"."columns" to "anon";

grant delete on table "public"."columns" to "authenticated";

grant insert on table "public"."columns" to "authenticated";

grant references on table "public"."columns" to "authenticated";

grant select on table "public"."columns" to "authenticated";

grant trigger on table "public"."columns" to "authenticated";

grant truncate on table "public"."columns" to "authenticated";

grant update on table "public"."columns" to "authenticated";

grant delete on table "public"."columns" to "service_role";

grant insert on table "public"."columns" to "service_role";

grant references on table "public"."columns" to "service_role";

grant select on table "public"."columns" to "service_role";

grant trigger on table "public"."columns" to "service_role";

grant truncate on table "public"."columns" to "service_role";

grant update on table "public"."columns" to "service_role";


CREATE OR REPLACE FUNCTION public.handle_new_board()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO ''
AS $function$
begin
  insert into public.board_members (board_id, user_id)
  values (new.id, (SELECT auth.uid() AS uid));
  return new;
end;
$function$
;


CREATE TRIGGER on_board_created AFTER INSERT ON public.boards FOR EACH ROW EXECUTE FUNCTION handle_new_board();