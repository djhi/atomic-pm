create table "public"."documents" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "title" text not null,
    "content" text not null,
    "board_id" bigint not null,
    "favorite" boolean not null default false,
    "type" text
);


alter table "public"."documents" enable row level security;

CREATE UNIQUE INDEX documents_pkey ON public.documents USING btree (id);

alter table "public"."documents" add constraint "documents_pkey" PRIMARY KEY using index "documents_pkey";

alter table "public"."documents" add constraint "documents_board_id_fkey" FOREIGN KEY (board_id) REFERENCES boards(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."documents" validate constraint "documents_board_id_fkey";

grant delete on table "public"."documents" to "anon";

grant insert on table "public"."documents" to "anon";

grant references on table "public"."documents" to "anon";

grant select on table "public"."documents" to "anon";

grant trigger on table "public"."documents" to "anon";

grant truncate on table "public"."documents" to "anon";

grant update on table "public"."documents" to "anon";

grant delete on table "public"."documents" to "authenticated";

grant insert on table "public"."documents" to "authenticated";

grant references on table "public"."documents" to "authenticated";

grant select on table "public"."documents" to "authenticated";

grant trigger on table "public"."documents" to "authenticated";

grant truncate on table "public"."documents" to "authenticated";

grant update on table "public"."documents" to "authenticated";

grant delete on table "public"."documents" to "service_role";

grant insert on table "public"."documents" to "service_role";

grant references on table "public"."documents" to "service_role";

grant select on table "public"."documents" to "service_role";

grant trigger on table "public"."documents" to "service_role";

grant truncate on table "public"."documents" to "service_role";

grant update on table "public"."documents" to "service_role";

create policy "Enable delete for board owners"
on "public"."documents"
as permissive
for delete
to authenticated
using (private.is_board_owner(( SELECT auth.uid() AS uid), board_id));


create policy "Enable insert for board memebers"
on "public"."documents"
as permissive
for insert
to authenticated
with check ((board_id IN ( SELECT private.get_user_boards(( SELECT auth.uid() AS uid)) AS get_user_boards)));


create policy "Enable select for board members"
on "public"."documents"
as permissive
for select
to authenticated
using ((board_id IN ( SELECT private.get_user_boards(( SELECT auth.uid() AS uid)) AS get_user_boards)));


create policy "Enable update for board members"
on "public"."documents"
as permissive
for update
to public
using ((board_id IN ( SELECT private.get_user_boards(( SELECT auth.uid() AS uid)) AS get_user_boards)))
with check ((board_id IN ( SELECT private.get_user_boards(( SELECT auth.uid() AS uid)) AS get_user_boards)));



