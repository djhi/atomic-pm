create table "public"."card_attachments" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "card_id" bigint not null,
    "path" character varying not null
);


alter table "public"."card_attachments" enable row level security;

CREATE UNIQUE INDEX card_attachments_pkey ON public.card_attachments USING btree (id);

alter table "public"."card_attachments" add constraint "card_attachments_pkey" PRIMARY KEY using index "card_attachments_pkey";

alter table "public"."card_attachments" add constraint "card_attachments_card_id_fkey" FOREIGN KEY (card_id) REFERENCES cards(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."card_attachments" validate constraint "card_attachments_card_id_fkey";

grant delete on table "public"."card_attachments" to "anon";

grant insert on table "public"."card_attachments" to "anon";

grant references on table "public"."card_attachments" to "anon";

grant select on table "public"."card_attachments" to "anon";

grant trigger on table "public"."card_attachments" to "anon";

grant truncate on table "public"."card_attachments" to "anon";

grant update on table "public"."card_attachments" to "anon";

grant delete on table "public"."card_attachments" to "authenticated";

grant insert on table "public"."card_attachments" to "authenticated";

grant references on table "public"."card_attachments" to "authenticated";

grant select on table "public"."card_attachments" to "authenticated";

grant trigger on table "public"."card_attachments" to "authenticated";

grant truncate on table "public"."card_attachments" to "authenticated";

grant update on table "public"."card_attachments" to "authenticated";

grant delete on table "public"."card_attachments" to "service_role";

grant insert on table "public"."card_attachments" to "service_role";

grant references on table "public"."card_attachments" to "service_role";

grant select on table "public"."card_attachments" to "service_role";

grant trigger on table "public"."card_attachments" to "service_role";

grant truncate on table "public"."card_attachments" to "service_role";

grant update on table "public"."card_attachments" to "service_role";

create policy "Enable create for board members"
on "public"."card_attachments"
as permissive
for insert
to public
with check ((card_id IN ( SELECT cards.id
   FROM cards
  WHERE (cards.column_id IN ( SELECT columns.id
           FROM columns
          WHERE (columns.board_id IN ( SELECT private.get_user_boards(( SELECT auth.uid() AS uid)) AS get_user_boards)))))));


create policy "Enable delete for board members"
on "public"."card_attachments"
as permissive
for delete
to public
using ((card_id IN ( SELECT cards.id
   FROM cards
  WHERE (cards.column_id IN ( SELECT columns.id
           FROM columns
          WHERE (columns.board_id IN ( SELECT private.get_user_boards(( SELECT auth.uid() AS uid)) AS get_user_boards)))))));


create policy "Enable select for board members"
on "public"."card_attachments"
as permissive
for select
to public
using ((card_id IN ( SELECT cards.id
   FROM cards
  WHERE (cards.column_id IN ( SELECT columns.id
           FROM columns
          WHERE (columns.board_id IN ( SELECT private.get_user_boards(( SELECT auth.uid() AS uid)) AS get_user_boards)))))));


create policy "Enable update for board members"
on "public"."card_attachments"
as permissive
for update
to public
using ((card_id IN ( SELECT cards.id
   FROM cards
  WHERE (cards.column_id IN ( SELECT columns.id
           FROM columns
          WHERE (columns.board_id IN ( SELECT private.get_user_boards(( SELECT auth.uid() AS uid)) AS get_user_boards)))))))
with check ((card_id IN ( SELECT cards.id
   FROM cards
  WHERE (cards.column_id IN ( SELECT columns.id
           FROM columns
          WHERE (columns.board_id IN ( SELECT private.get_user_boards(( SELECT auth.uid() AS uid)) AS get_user_boards)))))));
