create table "public"."card_events" (
    "id" bigint generated by default as identity not null,
    "date" timestamp with time zone not null,
    "card_id" bigint,
    "type" text not null,
    "message" text not null,
    "revision_id" bigint,
    "user_id" uuid not null
);


alter table "public"."card_events" enable row level security;

CREATE UNIQUE INDEX card_events_pkey ON public.card_events USING btree (id);

alter table "public"."card_events" add constraint "card_events_pkey" PRIMARY KEY using index "card_events_pkey";

alter table "public"."card_events" add constraint "card_events_card_id_fkey" FOREIGN KEY (card_id) REFERENCES cards(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."card_events" validate constraint "card_events_card_id_fkey";

alter table "public"."card_events" add constraint "card_events_revision_id_fkey" FOREIGN KEY (revision_id) REFERENCES revisions(id) not valid;

alter table "public"."card_events" validate constraint "card_events_revision_id_fkey";

alter table "public"."card_events" add constraint "card_events_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."card_events" validate constraint "card_events_user_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.handle_card_comment_event()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO ''
AS $function$
begin
  insert into public.card_events (card_id, date, type, message, user_id)
  values (new.card_id, now(), 'comment', new.message, new.user_id);
  return new;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.handle_card_revision_event()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO ''
AS $function$
begin
  if new.resource = 'cards' then
    insert into public.card_events (card_id, date, type, message, revision_id, user_id)
    values (new."recordId", now(), 'revision', new.message, new.id, new."authorId");
  end if;
  return new;
end;
$function$
;

grant delete on table "public"."card_events" to "anon";

grant insert on table "public"."card_events" to "anon";

grant references on table "public"."card_events" to "anon";

grant select on table "public"."card_events" to "anon";

grant trigger on table "public"."card_events" to "anon";

grant truncate on table "public"."card_events" to "anon";

grant update on table "public"."card_events" to "anon";

grant delete on table "public"."card_events" to "authenticated";

grant insert on table "public"."card_events" to "authenticated";

grant references on table "public"."card_events" to "authenticated";

grant select on table "public"."card_events" to "authenticated";

grant trigger on table "public"."card_events" to "authenticated";

grant truncate on table "public"."card_events" to "authenticated";

grant update on table "public"."card_events" to "authenticated";

grant delete on table "public"."card_events" to "service_role";

grant insert on table "public"."card_events" to "service_role";

grant references on table "public"."card_events" to "service_role";

grant select on table "public"."card_events" to "service_role";

grant trigger on table "public"."card_events" to "service_role";

grant truncate on table "public"."card_events" to "service_role";

grant update on table "public"."card_events" to "service_role";

create policy "Enable select for board members"
on "public"."card_events"
as permissive
for select
to public
using ((card_id IN ( SELECT cards.id
   FROM cards
  WHERE (cards.column_id IN ( SELECT columns.id
           FROM columns
          WHERE (columns.board_id IN ( SELECT private.get_user_boards(( SELECT auth.uid() AS uid)) AS get_user_boards)))))));


CREATE TRIGGER on_card_comment_created AFTER INSERT ON public.comments FOR EACH ROW EXECUTE FUNCTION handle_card_comment_event();

CREATE TRIGGER on_card_revision_created AFTER INSERT ON public.revisions FOR EACH ROW EXECUTE FUNCTION handle_card_revision_event();


